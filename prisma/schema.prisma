generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  password         String
  name             String?
  role             Role            @default(user)
  isAdmin          Boolean         @default(false)
  isLocked         Boolean         @default(false) @map("is_locked")
  createdAt        DateTime        @default(now()) @map("created_at")
  lastLogin        DateTime?       @map("last_login")
  lockUntil        DateTime?       @map("lock_until")
  loginAttempts    Int             @default(0)
  resetToken       String?         @map("reset_token")
  resetTokenExpire DateTime?       @map("reset_token_expire")
  updatedAt        DateTime?       @default(now()) @updatedAt @map("updated_at")
  maxDevices       Int             @default(1) @map("max_devices")
  checkpoints      Checkpoint[]
  fileAccesses     FileAccess[]
  activeSessions   ActiveSession[]
  deviceNotifications DeviceNotification[]

  @@map("users")
}

model AudioFile {
  id            Int          @id @default(autoincrement())
  filename      String
  path          String       @unique
  mimeType      String
  size          Int
  duration      Float
  title         String
  description   String?
  isPublic      Boolean      @default(false)
  isEncrypted   Boolean      @default(false)
  encryptionKey String?
  encryptionIV  String?
  coverImagePath String?     @map("cover_image_path")
  coverImageBase64 String?   @map("cover_image_base64")
  coverImageMimeType String? @map("cover_image_mime_type")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  checkpoints   Checkpoint[]
  fileAccesses  FileAccess[]
  chapters      AudioChapter[]
}

model FileAccess {
  id        Int       @id @default(autoincrement())
  userId    Int
  fileId    Int
  canView   Boolean   @default(true)
  grantedAt DateTime  @default(now())
  expiresAt DateTime?
  audioFile AudioFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fileId])
}

model Checkpoint {
  id          Int       @id @default(autoincrement())
  fileId      Int
  userId      Int
  timestamp   Float
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  audioFile   AudioFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fileId, timestamp, userId])
}

model AudioChapter {
  id        Int       @id @default(autoincrement())
  fileId    Int
  label     String
  startTime Float
  endTime   Float?
  order     Int
  createdAt DateTime  @default(now())
  audioFile AudioFile @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, order])
}

model ActiveSession {
  id              String    @id @default(cuid())
  userId          Int       @map("user_id")
  deviceId        String    @map("device_id")
  deviceName      String?   @map("device_name")
  deviceType      String?   @map("device_type")
  deviceFingerprint String @map("device_fingerprint")
  ipAddress       String    @map("ip_address")
  userAgent       String    @map("user_agent")
  isActive        Boolean   @default(true) @map("is_active")
  lastActivity    DateTime  @default(now()) @map("last_activity")
  createdAt       DateTime  @default(now()) @map("created_at")
  expiresAt       DateTime  @map("expires_at")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("active_sessions")
}

model DeviceNotification {
  id          String   @id @default(cuid())
  userId      Int      @map("user_id")
  deviceId    String   @map("device_id")
  deviceName  String?  @map("device_name")
  ipAddress   String   @map("ip_address")
  location    String?
  isRead      Boolean  @default(false) @map("is_read")
  notificationType String @map("notification_type") // 'new_device', 'device_locked', 'suspicious_activity'
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_notifications")
}

enum Role {
  user
  admin
}
